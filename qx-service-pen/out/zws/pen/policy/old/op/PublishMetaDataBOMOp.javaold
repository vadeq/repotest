package zws.pen.policy.old.op;
/*
* DesignState - Design Compression Technology
* @author: ptoleti
* @version: 1.0
* Created on Apr 27, 2007 9:58:02 AM
* Copywrite (c) 2007 Zero Wait-State Inc. All rights reserved
*/


import zws.bill.intralink.BillOfMaterials;
import zws.data.Metadata;
import zws.repository.Repository;
import zws.repository.target.RepositoryStructureTarget;
import zws.service.pen.PENDataElement;
import zws.service.pen.SourceDataElement;
import zws.service.pen.TargetDataElement;
import zws.service.pen.TxDataElement;
import zws.util.LogWriter;

import java.io.File;
import java.util.HashMap;
import java.util.Iterator;

/**
 * The Class UpdateStateAttributeOp.
 *
 * @author ptoleti
 */
public class PublishMetaDataBOMOp extends PENDataOpBase {

  /**
   * @throws Exception Exception
   * @see zws.pen.policy.old.op.PENDataOpBase#execute()
   */
  public void execute() throws Exception {

    PENDataElement penDataElement        = null;
    SourceDataElement srcDataElement     = null;
    TxDataElement txDataElement          = null;
    TargetDataElement targetDataElemet   = null;
    Metadata transformedData, targetData = null;
    String name = null;
    HashMap refMap = null;
    File binFile = null;
    try {
      LogWriter.printOnConsole("Execute in PublishMetaDataBOMOp ");
      Repository targetRep = getPenPolicyObj().getTargetRepository();
      RepositoryStructureTarget structureTargetObj = targetRep.materializeStructureTarget();

      refMap = getPenData().getReferenceMap();
      Iterator itr = refMap.keySet().iterator();
      //iterate thru ref map and get src and transform data from BOM ref object.
      while (itr.hasNext()) {
          name = (String) itr.next();
          penDataElement   = (PENDataElement) refMap.get(name);
          txDataElement = penDataElement.getTxDataElement();
          srcDataElement = penDataElement.getSourceDataElement();
          targetDataElemet = penDataElement.getTargetDataElement();

          transformedData = txDataElement.getTransformedData();
          if (null != srcDataElement.getBinaryCollection()) {
            binFile = (File) srcDataElement.getBinaryCollection().get(0);
            LogWriter.printOnConsole("binFile in PublishMetaDataOp    " + binFile.getName());
          } else {
            LogWriter.printOnConsole("binFile is not PublishMetaDataOp");
          }
          LogWriter.printOnConsole("Publishing    " + transformedData.getName());
          //targetData = repositoryMeadataTargetObj.update(getQxCtx(), transformedData, binFile, getAuthentication());
          structureTargetObj.createBill(getQxCtx(), new BillOfMaterials(transformedData), getAuthentication());
          //Authentication id = new Authentication(targetRep.getSystemUsername(), targetRep.getSystemPassword());
          //targetData = repositoryMeadataTargetObj.update(getQxCtx(), transformedData, binFile, id);
          targetDataElemet.setTargetData(targetData);
          penDataElement.setTargetDataElement(targetDataElemet);
          refMap.put(name, penDataElement);
      }
    } catch (Exception e) {
      e.printStackTrace();
      throw e;
    }
  }
}
