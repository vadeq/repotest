package zws.pen.policy.old.op;
/*
* DesignState - Design Compression Technology
* @author: ptoleti
* @version: 1.0
* Created on Apr 27, 2007 9:58:02 AM
* Copywrite (c) 2007 Zero Wait-State Inc. All rights reserved
*/


import zws.Server;
import zws.data.Metadata;
import zws.data.MetadataBase;
import zws.data.MetadataSubComponent;
import zws.data.MetadataSubComponentBase;
import zws.origin.Origin;
import zws.service.pen.PENDataElement;
import zws.service.pen.SourceDataElement;
import zws.service.pen.TxDataElement;
import zws.service.synchronization.qx.SynchronizationClient;
import zws.service.synchronization.qx.SynchronizationService;
import zws.util.LogWriter;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;


/**
 * The Class UpdateStateAttributeOp.
 *
 * @author ptoleti
 */
public class CheckStatusOp extends PENDataOpBase {

  /**
   * @throws Exception Exception
   * @see zws.pen.policy.old.op.PENDataOpBase#execute()
   */
  public void execute() throws Exception {
    LogWriter.printOnConsole("CheckStatusOp execute....");
    Metadata sourceData = null;
    String name = null;
    HashMap refMap = null;
    PENDataElement penDataElement = null;
    ArrayList targetOriginList = null;
    Origin temp = null;
    try {
      refMap = getPenData().getReferenceMap();
      Iterator itr = refMap.keySet().iterator();
      //iterate thru ref map and get src and transform data from BOM ref object.
      while (itr.hasNext()) {
        name = (String) itr.next();
        penDataElement   = (PENDataElement) refMap.get(name);
        SourceDataElement srcDataElement = penDataElement.getSourceDataElement();
        sourceData      = srcDataElement .getSourceData();
        LogWriter.printOnConsole("Name : " + sourceData.getName());
        Collection originSyncRecords = getOriginSyncRecords(sourceData);
        Collection syncRecords = getSyncRecords(sourceData);
        // set targetOriginList  - >src Data element -> pendata lement -> refmap
        /*
        srcDataElement.setTargetSyncOrigin(originSyncRecords);
        srcDataElement.setSyncRecordList(syncRecords);
        penDataElement.setSourceDataElement(srcDataElement);
        refMap.put(sourceData.getName(), penDataElement);
        getPenData().setReferenceMap(refMap);
        */
        setPenData(getPenData());
      }
    } catch (Exception e) {
      e.printStackTrace();
      throw e;
    }
 }

  private Collection getOriginSyncRecords(Metadata srcData) throws Exception{
    Collection origins = null;
    if(null != srcData.getOrigin()) {
      LogWriter.printOnConsole("getOriginSyncRecords: " + srcData.getOrigin().toString());
      SynchronizationService r = SynchronizationClient.getClient(Server.getHostName());
      origins = r.findAllSynchronizationRecords(srcData.getOrigin());
    }
    return origins;
  }

  private Collection getSyncRecords(Metadata srcData) throws Exception{
    Collection origins = null;
    if(null != srcData.getOrigin()) {
      LogWriter.printOnConsole("getSyncRecords: " + srcData.getOrigin().toString());
      SynchronizationService r = SynchronizationClient.getClient(Server.getHostName());
      origins = r.findAllSynchronizationRecords(srcData.getName());
    }
    return origins;
  }
}
