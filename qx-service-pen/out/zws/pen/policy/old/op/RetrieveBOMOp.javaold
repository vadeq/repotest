package zws.pen.policy.old.op;
/*
* DesignState - Design Compression Technology
* @author: ptoleti
* @version: 1.0
* Created on Apr 27, 2007 9:58:02 AM
* Copywrite (c) 2007 Zero Wait-State Inc. All rights reserved
*/


import zws.data.Metadata;
import zws.data.MetadataBase;
import zws.data.MetadataSubComponent;
import zws.repository.Repository;
import zws.repository.source.RepositoryStructureSource;
import zws.security.Authentication;
import zws.service.pen.PENDataElement;
import zws.service.pen.SourceDataElement;
import zws.service.pen.TargetDataElement;
import zws.service.pen.TxDataElement;
import zws.util.LogWriter;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;


/**
 * The Class UpdateStateAttributeOp.
 *
 * @author ptoleti
 */
public class RetrieveBOMOp extends PENDataOpBase {

  /**
   * @throws Exception Exception
   * @see zws.pen.policy.old.op.PENDataOpBase#execute()
   */
  public void execute() throws Exception {
    LogWriter.printOnConsole("RetrieveBOMOp execute....");
    Metadata sourceData = null;
    HashMap penRefMap = new HashMap();
    try {
      Repository repositoryObj = getPenPolicyObj().getSourceRepository();
      RepositoryStructureSource structureSourceObj = repositoryObj.materializeStructureSource();
      //Authentication id = new Authentication(repositoryObj.getSystemUsername(), repositoryObj.getSystemPassword());
      sourceData = structureSourceObj.reportBill(getQxCtx(), getOrigin(), this.getAuthentication());
      if (null != sourceData) {
        getChildren(sourceData, penRefMap);
        getPenData().setReferenceMap(penRefMap);
        LogWriter.printOnConsole("RetrieveBOMOp    " + sourceData);
        // extract all the elements from BOM into a Map
        getPenData().setSourceData(sourceData);
        setPenData(getPenData());
      } else {
        LogWriter.printOnConsole("BOM is not found.");
      }
    } catch (Exception e) {
      e.printStackTrace();
      throw e;
    }
 }

  /**
   * @param parent parent data
   * @param penRefMap reference map
   */
  private static void getChildren(Metadata parent, HashMap penRefMap) {
    LogWriter.printOnConsole(parent.getName());
    PENDataElement penDataElement = new PENDataElement();

    SourceDataElement srcDataElement = new SourceDataElement();
    TxDataElement txDataElement = new TxDataElement();
    TargetDataElement targetDataElement = new TargetDataElement();

    // set  parent -> srcDataElement -> penDataElement
    srcDataElement.setSourceData(parent);
    txDataElement.setTransformedData(new MetadataBase());
    targetDataElement.setTargetData(new MetadataBase());


    penDataElement.setSourceDataElement(srcDataElement);
    penDataElement.setTxDataElement(txDataElement);
    penDataElement.setTargetDataElement(targetDataElement);

    if (!penRefMap.containsKey(parent.getName())) {
      penRefMap.put(parent.getName(), penDataElement);
    } else {
      LogWriter.printOnConsole(parent.getName() + " Already added to Map");
      // check the origin and unique ID
      // if they are different throw error
    }

    Collection childrenLst = parent.getSubComponents();
    if (null != childrenLst) {
      Iterator itr = childrenLst.iterator();
      MetadataSubComponent temp = null;
      while (itr.hasNext()) {
        temp = (MetadataSubComponent) itr.next();
        getChildren(temp, penRefMap);
      }
    }
  }
}
