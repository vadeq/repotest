package zws.pen.policy.old.op;
/*
* DesignState - Design Compression Technology
* @author: ptoleti
* @version: 1.0
* Created on Apr 27, 2007 9:58:02 AM
* Copywrite (c) 2007 Zero Wait-State Inc. All rights reserved
*/


import zws.data.Metadata;
import zws.data.MetadataBase;
import zws.data.MetadataSubComponent;
import zws.data.MetadataSubComponentBase;
import zws.service.pen.PENDataElement;
import zws.service.pen.SourceDataElement;
import zws.service.pen.TxDataElement;
import zws.util.LogWriter;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;


/**
 * The Class UpdateStateAttributeOp.
 *
 * @author ptoleti
 */
public class CopyStructureOp extends PENDataOpBase {

  /**
   * @throws Exception Exception
   * @see zws.pen.policy.old.op.PENDataOpBase#execute()
   */
  public void execute() throws Exception {
    LogWriter.printOnConsole("CopyStructureOp execute....");
    Metadata transformedData = null;
    Metadata sourceData = null;
    String name = null;
    HashMap refMap = null;
    PENDataElement penDataElement = null;
    ArrayList childObjects = null;
    HashMap childMap = null;
    try {
      refMap = getPenData().getReferenceMap();
      Iterator itr = refMap.keySet().iterator();
      LogWriter.printOnConsole("Execute in RenameAttributeOp ");
      //iterate thru ref map and get src and transform data from BOM ref object.
      while (itr.hasNext()) {
        name = (String) itr.next();
        penDataElement   = (PENDataElement) refMap.get(name);
        SourceDataElement srcDataElement = penDataElement.getSourceDataElement();
        TxDataElement txDataElement = penDataElement.getTxDataElement();
        sourceData      = srcDataElement .getSourceData();
        transformedData = txDataElement.getTransformedData();
        LogWriter.printOnConsole("Name : " + sourceData.getName());
        if (null != sourceData && null != sourceData.getSubComponents()) {
          childMap = txDataElement.getChildMap();
          childObjects = new ArrayList();
          MetadataSubComponent cObj = null;
          Iterator objItr = sourceData.getSubComponents().iterator();
          while(objItr.hasNext()) {
            cObj = (MetadataSubComponent)objItr.next();
            childObjects.add(cObj.getName());
          }
          LogWriter.printOnConsole("child objects for  " + sourceData.getName());
          zws.util.PrintUtil.print(childObjects);
          // set child map in pendata element
          childMap.put(sourceData.getName(), childObjects);
          txDataElement.setChildMap(childMap);
        }
          // set src metadata  - >txdata element -> pendata lement -> refmap
          //txDataElement.setTransformedData(sourceData);
          //txDataElement.setTransformedData(new MetadataBase());
          penDataElement.setTxDataElement(txDataElement);
          refMap.put(sourceData.getName(), penDataElement);
          getPenData().setReferenceMap(refMap);
          setPenData(getPenData());
      }
    } catch (Exception e) {
      e.printStackTrace();
      throw e;
    }
 }


  /** This method will prepare the refmap with part name and source data table.
   * Transform data will get populated with first level child objects of each part.
   * @param srcParent source
   * @param penRefMap reference map
  */
  /*private void prepareTransformData(Metadata srcParent, HashMap penRefMap) {
    PENDataElement penDataElement = null;
    MetadataSubComponent srcChild = null;
    MetadataSubComponentBase tempChild = null;
    Iterator itr = null;
    String itemName = srcParent.getName();
    LogWriter.printOnConsole(itemName + " Adding subParts");
    Metadata tempData = new MetadataBase();
    tempData.set("name", itemName);
    penDataElement = (PENDataElement) getPenData().getReferenceMap().get(itemName);
    Collection childrenLst = srcParent.getSubComponents();
    if (null != childrenLst) {
      LogWriter.printOnConsole(" total sub-parts " + childrenLst.size());
      itr = childrenLst.iterator();
      while (itr.hasNext()) {
        srcChild = (MetadataSubComponent) itr.next();
        tempChild = new MetadataSubComponentBase(new MetadataBase());
        tempChild.set("name", srcChild.getName());
        tempChild.set("pavan", "pavan");
        tempChild.setQuantity(srcChild.getQuantity());
        tempData.addSubComponent(tempChild);
        prepareTransformData(srcChild, penRefMap);
      }
    }
      TxDataElement txDataElement = penDataElement.getTxDataElement();
      //TxDataElement txDataElement = new TxDataElement();
      txDataElement.setTransformedData(tempData);
      penDataElement.setTxDataElement(txDataElement);
      penRefMap.put(srcParent.getName(), penDataElement);
      getPenData().setReferenceMap(penRefMap);
      setPenData(getPenData());
  }*/
}
