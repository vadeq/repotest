// ===========================================================================
// Copyright © 1995-2003 Agile Software Corporation, 6373 San Ignacio Avenue,
// San Jose, California 95119-1200 U.S.A.; Telephone 408.284.4000, Facsimile
// 408.284.4002, or <http://www.agile.com/>. All rights reserved.
//
// This file, which has been provided by Agile Software Corporation as part of
// an Agile Software® product for use ONLY by licensed users of the product,
// includes CONFIDENTIAL and PROPRIETARY information of Agile Software
// Corporation.
//
// USE OF THIS SOFTWARE IS GOVERNED BY THE TERMS AND CONDITIONS OF THE LICENSE
// AGREEMENT AND LIMITED WARRANTY FURNISHED WITH THE PRODUCT.
//
// IN PARTICULAR, YOU WILL INDEMNIFY AND HOLD AGILE SOFTWARE CORPORATION, ITS
// RELATED COMPANIES AND ITS SUPPLIERS, HARMLESS FROM AND AGAINST ANY CLAIMS
// OR LIABILITIES ARISING OUT OF THE USE, REPRODUCTION, OR DISTRIBUTION OF
// YOUR PROGRAMS, INCLUDING ANY CLAIMS OR LIABILITIES ARISING OUT OF OR
// RESULTING FROM THE USE, MODIFICATION, OR DISTRIBUTION OF PROGRAMS OR FILES
// CREATED FROM, BASED ON, AND/OR DERIVED FROM THIS SAMPLE SOURCE CODE FILE.
// ===========================================================================
package com.agile.sdo.cif;

import java.io.File;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Stack;
import java.util.StringTokenizer;

import com.agile.plmapi.api.PlmAttribute;
import com.agile.plmapi.api.PlmException;
import com.agile.plmapi.api.PlmFactory;
import com.agile.plmapi.api.PlmObject;
import com.agile.plmapi.api.PlmRelation;
import com.agile.plmapi.api.PlmRequest;
import com.agile.plmapi.api.PlmResponse;
import com.agile.plmapi.api.PlmSession;
import com.agile.plmapi.api.PlmUserData;
import com.agile.plmapi.api.impl.PlmRequestHelper;
import com.agile.plmapi.api.impl.PlmResponseHelper;
import com.agile.share.xml.XmlDocument;
import com.agile.webfs.client.ContentService;
import com.agile.webfs.client.IFSLocator;
import com.agile.webfs.components.security.client.UserPasswordToken;


/**
 * The Class CifClientUtils.
 */
public class CifClientUtils {

  /**
   * Dfm upload for request.
   *
   * @param session the session
   * @param request the request
   *
   * @throws Exception the exception
   */
  public static void dfmUploadForRequest(PlmSession session, PlmRequest request)
      throws Exception {
    for (Iterator i = getAllObjects(request, "type", "item").iterator(); i
        .hasNext();) {
      PlmObject obj = (PlmObject) i.next();
      if (obj.hasRelations()) {
        for (Iterator ri = obj.getRelations().iterator(); ri.hasNext();) {
          PlmRelation rel = (PlmRelation) ri.next();
          if (rel.getEntity().getName()
              .equalsIgnoreCase("object-file-relation")) {
            String filename = rel.getOptionValue("filename");
            String filepath = rel.getOptionValue("filepath");
            String fileid = dfmUpload(session, filepath, filename);
            if (fileid != null) {
              rel.setOptionValue("fileid", fileid);
            }
          }
        }
      }
    }
  } // dfmUploadForRequest

  /**
   * Insert file id.
   *
   * @param request the request
   * @param filename the filename
   * @param fileid the fileid
   * @param objkey the objkey
   *
   * @throws Exception the exception
   */
  public static void insertFileId(PlmRequest request, String objkey,
      String filename, String fileid) throws Exception {
    for (Iterator i = getAllObjects(request, "type", "item").iterator(); i
        .hasNext();) {
      PlmObject obj = (PlmObject) i.next();
      if (obj.getKey() != null && obj.getKey().equalsIgnoreCase(objkey)) {
        if (obj.hasRelations()) {
          for (Iterator ri = obj.getRelations().iterator(); ri.hasNext();) {
            PlmRelation rel = (PlmRelation) ri.next();
            if (rel.getEntity().getName().equalsIgnoreCase("object-file-relation")) {
              if (rel.getOptionValue("filename").equalsIgnoreCase(filename)) {
                rel.setOptionValue("fileid", fileid);
              }
            }
          }
        }
      }
    }
  } // insertFileId

  /**
   * Dfm upload.
   *
   * @param filepath the filepath
   * @param session the session
   * @param filename the filename
   *
   * @return the string
   *
   * @throws Exception the exception
   */
  public static String dfmUpload(PlmSession session, String filepath,
      String filename) throws Exception {
    PlmUserData data = session.getUserData();
    String fsUrl = data.getFSUrl();
    String userName = data.getUserName();
    String password = data.getPassword();
    ContentService service = IFSLocator.getConnection(fsUrl,
        new UserPasswordToken(userName, password));
    String fileId = service.checkIn("", new File(filepath, filename));
    return fileId;
  } // dfmUpload

  /**
   * Dump request XML.
   *
   * @param request the request
   */
  public static void dumpRequestXML(PlmRequest request) {
    try {
      XmlDocument rqstDoc = new XmlDocument(PlmRequestHelper.marshal(request));
      long t = System.currentTimeMillis();
      Date d = new Date(t);
      System.out.println("------ Request " + d.toString() + " ------");
      System.out.println(rqstDoc.toFormattedString());
      System.out.println("------ Request End ------");
      System.out.println();
    } catch (Exception e) {
      throw new RuntimeException(e.getMessage());
    }
  } // dumpRequestXML

  /**
   * Dump response XML.
   *
   * @param response the response
   *
   * @throws RuntimeException the runtime exception
   */
  public static void dumpResponseXML(PlmResponse response) {
    try {
      XmlDocument rpnsDoc = new XmlDocument(PlmResponseHelper.marshal(response));
      long t = System.currentTimeMillis();
      Date d = new Date(t);
      System.out.println("------ Response " + d.toString() + " Status = "
          + response.getStatus() + " ------");
      System.out.println(rpnsDoc.toFormattedString());
      System.out.println("------ Response End ------");
    } catch (Exception e) {
      throw new RuntimeException(e.getMessage());
    }
  } // dumpResponseXML

  /**
   * Split.
   *
   * @param str the str
   * @param delim the delim
   *
   * @return the string[]
   */
  private static String[] split(String str, String delim) {
    if (str == null || delim == null) {
      return null;
    }
    StringTokenizer t = new StringTokenizer(str, delim);
    String[] values = new String[t.countTokens()];
    for (int i = 0; t.hasMoreTokens(); i++) {
      values[i] = t.nextToken();
    }
    return values;
  }

  /**
   * Login.
   *
   * @param pwd the pwd
   * @param user the user
   * @param wsurl the wsurl
   *
   * @return the plm session
   *
   * @throws RuntimeException the runtime exception
   */
  public static PlmSession login(final String wsurl, final String user, final String pwd) {
    String[] s = split(wsurl, "/");
    String ahost = s[1];
    String aurl = "http://" + s[1] + "/" + s[2];

    Map map = new HashMap();
    map.put(PlmSession.KEY_SYSTEM, "agile.plmapi.sdk");
    map.put(PlmSession.KEY_USER, user);
    map.put(PlmSession.KEY_PASSWORD, pwd);
    map.put(PlmSession.KEY_RESOURCE, "19990");
    map.put(PlmSession.KEY_APPLICATION, aurl);
    map.put(PlmSession.KEY_HOST, ahost);
    map.put(PlmSession.KEY_URL, wsurl);
    map.put(PlmSession.KEY_OPTIONS, "");
    map.put(PlmSession.KEY_PROTOCOL, PlmSession.PROTOCOL_WEBSERVICE);
    final PlmSession session = PlmFactory.getSession();
    try {
      System.out.println("opening session on " + wsurl); // debug
      session.open(map);
      System.out.println("session opened!"); // debug
    } catch (PlmException e) {
      session.close();
      e.printStackTrace();
    }

    if (!session.isValid()) { throw new RuntimeException("Invalid Session"); }
    return session;

  } // login

  /**
   * Adds the attribute.
   *
   * @param dirtyflag the dirtyflag
   * @param source the source
   * @param mappedflag the mappedflag
   * @param name the name
   * @param value the value
   * @param obj the obj
   *
   * @return the plm attribute
   *
   * @throws Exception the exception
   */
  public static PlmAttribute addAttribute(PlmObject obj, String name,
      String value, boolean dirtyflag, boolean mappedflag, String source)
      throws Exception {
    PlmAttribute attr = obj.setAttributeValue(name, value);
    attr.setMapped(mappedflag);
    attr.setDirty(dirtyflag);
    attr.setSource(source);
    return attr;
  }

  /**
   * Adds the attribute.
   *
   * @param dirtyflag the dirtyflag
   * @param source the source
   * @param mappedflag the mappedflag
   * @param name the name
   * @param value the value
   * @param rel the rel
   *
   * @return the plm attribute
   *
   * @throws Exception the exception
   */
  public static PlmAttribute addAttribute(PlmRelation rel, String name,
      String value, boolean dirtyflag, boolean mappedflag, String source)
      throws Exception {
    PlmAttribute attr = rel.setAttributeValue(name, value);
    attr.setMapped(mappedflag);
    attr.setDirty(dirtyflag);
    attr.setSource(source);
    return attr;
  }

  /**
   * Adds the object.
   *
   * @param dirtyflag the dirtyflag
   * @param source the source
   * @param mappedflag the mappedflag
   * @param name the name
   * @param key the key
   *
   * @return the plm object
   *
   * @throws Exception the exception
   */
  public static PlmObject addObject(String name, String key, boolean dirtyflag,
      boolean mappedflag, String source) throws Exception {
    PlmObject obj = PlmFactory.createObject(name);
    obj.setDirty(dirtyflag); // will go away
    obj.setKey(key);
    obj.setMapped(mappedflag);
    obj.setSource(source);
    return obj;
  }

  /**
   * Adds the relation.
   *
   * @param keychild the keychild
   * @param child the child
   * @param dirtyflag the dirtyflag
   * @param keyparent the keyparent
   * @param source the source
   * @param mappedflag the mappedflag
   * @param name the name
   * @param parent the parent
   *
   * @return the plm relation
   *
   * @throws Exception the exception
   */
  public static PlmRelation addRelation(PlmObject parent, PlmObject child,
      String name, String keyparent, String keychild, boolean dirtyflag,
      boolean mappedflag, String source) throws Exception {
    PlmRelation rel = parent.createRelation(name, child);
    rel.setDirty(dirtyflag); // will go away
    rel.setMapped(mappedflag);
    rel.setSource(source);
    rel.setKeyParent(keyparent);
    rel.setKeyChild(keychild);
    return rel;
  }

  // these following need to be in sync with CifStructure on the server side!!!

  /**
   * Gets the all objects.
   *
   * @param optionfiltervalue the optionfiltervalue
   * @param optionfilter the optionfilter
   * @param request the request
   *
   * @return the all objects
   *
   * @throws Exception the exception
   */
  public static Stack getAllObjects(PlmRequest request, String optionfilter,
      String optionfiltervalue) throws Exception {
    Stack s = new Stack();
    for (Iterator i = request.getData().getObjects().iterator(); i.hasNext();) {
      getAllChildren(s, (PlmObject) i.next(), optionfilter, optionfiltervalue);
    }
    return s;
  } // getAllObjects

  /**
   * Gets the all children.
   *
   * @param optionfiltervalue the optionfiltervalue
   * @param optionfilter the optionfilter
   * @param c the c
   * @param object the object
   *
   * @throws Exception the exception
   */
  public static void getAllChildren(Stack c, PlmObject object,
      String optionfilter, String optionfiltervalue) throws Exception {
    Collection collection = object.getRelations();
    PlmRelation relation;
    for (Iterator iterator = collection.iterator(); iterator.hasNext();
                          getAllChildren(c, relation.getChild(), optionfilter, optionfiltervalue)) {
      relation = (PlmRelation) iterator.next();
    }
    if (optionfilter != null && optionfilter.length() > 0) {
      if (optionfiltervalue != null && optionfiltervalue.length() > 0) {
        if (object.getOptionValue(optionfilter) != null
            && object.getOptionValue(optionfilter).equalsIgnoreCase(optionfiltervalue)
            && !c.contains(object)) {
          c.push(object);
        }
      }
    } else if (!c.contains(object)) {
      c.push(object);
    }
  } // getAllChildren

}
