// ===========================================================================
// Copyright © 1995-2003 Agile Software Corporation, 6373 San Ignacio Avenue,
// San Jose, California 95119-1200 U.S.A.; Telephone 408.284.4000, Facsimile
// 408.284.4002, or <http://www.agile.com/>. All rights reserved.
//
// This file, which has been provided by Agile Software Corporation as part of
// an Agile Software® product for use ONLY by licensed users of the product,
// includes CONFIDENTIAL and PROPRIETARY information of Agile Software
// Corporation.
//
// USE OF THIS SOFTWARE IS GOVERNED BY THE TERMS AND CONDITIONS OF THE LICENSE
// AGREEMENT AND LIMITED WARRANTY FURNISHED WITH THE PRODUCT.
//
// IN PARTICULAR, YOU WILL INDEMNIFY AND HOLD AGILE SOFTWARE CORPORATION, ITS
// RELATED COMPANIES AND ITS SUPPLIERS, HARMLESS FROM AND AGAINST ANY CLAIMS
// OR LIABILITIES ARISING OUT OF THE USE, REPRODUCTION, OR DISTRIBUTION OF
// YOUR PROGRAMS, INCLUDING ANY CLAIMS OR LIABILITIES ARISING OUT OF OR
// RESULTING FROM THE USE, MODIFICATION, OR DISTRIBUTION OF PROGRAMS OR FILES
// CREATED FROM, BASED ON, AND/OR DERIVED FROM THIS SAMPLE SOURCE CODE FILE.
// ===========================================================================
package com.agile.sdo.cif;

import zws.data.Metadata;
import zws.data.MetadataBase;
import zws.origin.AgileOrigin;
import zws.repository.agile.plm.api.AgilePLMAPIRepositoryBase;
import zws.security.Authentication;
import zws.util.LogWriter;

import java.text.SimpleDateFormat;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.StringTokenizer;

import com.agile.plmapi.api.PlmAttribute;
import com.agile.plmapi.api.PlmAttributeCriteria;
import com.agile.plmapi.api.PlmData;
import com.agile.plmapi.api.PlmException;
import com.agile.plmapi.api.PlmExpressionCriteria;
import com.agile.plmapi.api.PlmFactory;
import com.agile.plmapi.api.PlmObject;
import com.agile.plmapi.api.PlmQuery;
import com.agile.plmapi.api.PlmRelation;
import com.agile.plmapi.api.PlmRequest;
import com.agile.plmapi.api.PlmResponse;
import com.agile.plmapi.api.PlmSession;
import com.agile.plmapi.api.impl.PlmRequestHelper;
import com.agile.plmapi.api.impl.PlmResponseHelper;
import com.agile.share.xml.XmlDocument;

/**
 * The Class CifClientUtils.
 */
public class CifClientSvc {
  public CifClientSvc() {  }
  public CifClientSvc(String strURL, Authentication authID, AgilePLMAPIRepositoryBase rep) {
    url = strURL;
    id = authID;
    repository = rep;
  }
  public void loadCIFsvc(String strURL, Authentication authID, AgilePLMAPIRepositoryBase rep) {
    url = strURL;
    id = authID;
    repository = rep;
  }
  private PlmSession getSession() {
    if (null == plmSession || !plmSession.isValid()) {
      plmSession = login(url, id);
    }
    return plmSession;
  }

  public PlmSession login(final String wsurl, Authentication id ) {
    String[] s = split(wsurl, "/");
    String ahost = s[1];
    String aurl = "http://" + s[1] + "/" + s[2];

    Map map = new HashMap();
    map.put(PlmSession.KEY_SYSTEM, "agile.plmapi.sdk");
    map.put(PlmSession.KEY_USER, id.getUsername());
    map.put(PlmSession.KEY_PASSWORD, id.getPassword());
    map.put(PlmSession.KEY_RESOURCE, "19990");
    map.put(PlmSession.KEY_APPLICATION, aurl);
    map.put(PlmSession.KEY_HOST, ahost);
    map.put(PlmSession.KEY_URL, wsurl);
    map.put(PlmSession.KEY_OPTIONS, "");
    map.put(PlmSession.KEY_PROTOCOL, PlmSession.PROTOCOL_WEBSERVICE);
    final PlmSession session = PlmFactory.getSession();
    try {
      System.out.println("opening session on " + wsurl); // debug
      session.open(map);
      System.out.println("session opened!"); // debug
    } catch (PlmException e) {
      session.close();
      e.printStackTrace();
    }
    if (!session.isValid()) {throw new RuntimeException("Invalid Session");}
    return session;

  }

  public Metadata createObject(Metadata metadata, String fileName, String source, Map optionsMap,
                               boolean mappedflag, boolean dirtyflag) throws Exception {
    MetadataBase metadataObj = null;
    String createdByUser = id.getUsername();
    String createdDate = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss").format(new java.util.Date());
    String createdByTool = "MCAD Libraby";
    String createdByToolVersion = "PLS 1.3";
    String createdForProject = "project PLS 1.3";
    metadata.set("attachment", fileName);
    if (null == metadata.get("number")) {
      metadata.set("number", metadata.getName());
    }
    String[] attributes = getStringArray(metadata.getAttributes());
    String[] options = getStringArray(optionsMap);
    PlmRequest request = PlmFactory.createRequest();
    setHeader(request, createdByUser, createdDate, createdByTool, createdByToolVersion, createdForProject);
    PlmObject plmObject = createPLMObject(request, "", metadata.getName(), source, options, attributes, mappedflag, dirtyflag);
    releasePlmObject(getSession(), request);
    if (null != plmObject) {
      metadataObj = new MetadataBase();
      String key = null;
      Map plmAttrMap = plmObject.getAttributes();
      Iterator itr = plmAttrMap.keySet().iterator();
      while (itr.hasNext()) {
        key = (String) itr.next();
        metadataObj.set(key, plmObject.getAttributeValue(key));
      }
    }
    AgileOrigin o = new AgileOrigin(repository.getDomainName(), repository.getServerName(),repository.getName(),
                                    plmObject.getId(),plmObject.getAttributeValue(com.agile.plmapi.api.PlmClassConstants.ATTRIB_CLASS_NAME), metadata.getName());
    o.setTimeOfCreationInMillis(System.currentTimeMillis());
    metadataObj.setOrigin(o);
    return metadataObj;
  }

  private void releasePlmObject(PlmSession session, PlmRequest request) throws Exception {
    PlmResponse plmResponse = null;
    String action = "mapping";

    dump(action, request);
    plmResponse = session.execute(action, request);
    checkErrors(action, session,plmResponse);

    XmlDocument rpnsDoc1 = new XmlDocument(PlmResponseHelper.marshal(plmResponse));
    LogWriter.printOnConsole(rpnsDoc1.toFormattedString());

    action = "checkstatus";
    PlmRequest mappedrequest = PlmFactory.createRequest(plmResponse, action);
    dump(action, mappedrequest);
    plmResponse = session.execute(action, mappedrequest);
    checkErrors(action, session,plmResponse);

    rpnsDoc1 = new XmlDocument(PlmResponseHelper.marshal(plmResponse));
    LogWriter.printOnConsole(rpnsDoc1.toFormattedString());


    action = "reserve";
    mappedrequest = PlmFactory.createRequest(plmResponse, action);
    dump(action, mappedrequest);
    plmResponse = session.execute(action, mappedrequest);
    checkErrors(action, session,plmResponse);

    /*
     * System.out.println("validate...");
     * mappedrequest=PlmFactory.createRequest(plmResponse,"validate");
     * dump(action, mappedrequest);
     * plmResponse=session.execute("validate",mappedrequest);
     * if(plmResponse.getStatus().hasErrors() ||
     * plmResponse.getStatus().hasFatals()) errorout(session,plmResponse);
     */
    action = "upload-files";
    mappedrequest = PlmFactory.createRequest(plmResponse, action);
    mappedrequest.getHeader().setParameter("recurse", "true"); // set to scan the whole request structure
    dump(action, mappedrequest);
    plmResponse = session.execute(action, mappedrequest);
    checkErrors(action, session,plmResponse);

    action = "update";
    mappedrequest = PlmFactory.createRequest(plmResponse, action);
    dump(action, mappedrequest);
    plmResponse = session.execute(action, mappedrequest);
    checkErrors(action, session,plmResponse);

    action = "release";
    mappedrequest = PlmFactory.createRequest(plmResponse, action);
    dump(action, mappedrequest);
    plmResponse = session.execute(action, mappedrequest);
    checkErrors(action, session,plmResponse);
    session.close();
    System.out.println(PlmResponseHelper.marshal(plmResponse).toFormattedString());
  }

  public PlmObject createPLMObject(PlmRequest request, String name, String key,String source,
                                   String[] options, String[] attributes,
                                   boolean mappedflag, boolean dirtyflag) throws Exception {
    PlmObject obj = PlmFactory.createObject(name);
    obj.setDirty(dirtyflag);
    obj.setMapped(mappedflag);
    obj.setSource(source);
    obj.setKey(key);
    if (attributes != null) {
      for (int i = 0; i < attributes.length - 1; i = i + 2) {
        PlmAttribute attr = obj.setAttributeValue(attributes[i], attributes[i + 1]);
        attr.setSource(source);
        attr.setDirty(dirtyflag);
        attr.setMapped(mappedflag);
      }
    }
    if (options != null) {
      for (int i = 0; i < options.length - 1; i = i + 2) {
        obj.setOptionValue(options[i], options[i + 1]);
      }
    }
    request.getData().addObject(obj);
    return obj;
  }

  public PlmRelation createRelation(String name, PlmObject parent, PlmObject child,
                                    String keyparent, String keychild,
                                    String source,String[] options, String[] attributes,
                                    boolean mappedflag, boolean dirtyflag) throws Exception {
    PlmRelation rel = parent.createRelation(name, child);
    rel.setDirty(dirtyflag);
    rel.setMapped(mappedflag);
    rel.setSource(source);
    rel.setKeyParent(keyparent);
    rel.setKeyChild(keychild);
    if (attributes != null) {
      for (int i = 0; i < attributes.length - 1; i = i + 2) {
        PlmAttribute attr = rel.setAttributeValue(attributes[i], attributes[i + 1]);
        attr.setSource(source);
        attr.setDirty(dirtyflag);
        attr.setMapped(mappedflag);
      }
    }
    if (options != null) {
      for (int i = 0; i < options.length - 1; i = i + 2) {
      rel.setOptionValue(options[i], options[i + 1]);
      }
    }
    return rel;
  }

  public void setHeader(PlmRequest request, String createdByUser, String createdDate,
                                            String createdByTool, String createdByToolVersion,
                                            String createdForProject) {
    request.getHeader().setParameter("createdByUser", createdByUser);
    request.getHeader().setParameter("createdDate", createdDate);
    request.getHeader().setParameter("createdByTool", createdByTool);
    request.getHeader().setParameter("createdByToolVersion", createdByToolVersion);
    request.getHeader().setParameter("createdForProject", createdForProject);
    request.getHeader().setParameter("debugfilter", "note");
    request.getHeader().setParameter("logginglevels", "note,warn");
  }

  public String[] getStringArray(Map attrMap) {
    String[] strArray = null;
    String key = null;
    String value = null;
    int idx = 0;
    if (null != attrMap) {
      strArray = new String[(attrMap.size() * 2)];
      Iterator itr = attrMap.keySet().iterator();
      while (itr.hasNext()) {
        key = (String) itr.next();
        value = (String) attrMap.get(key);
        strArray[idx++] = key;
        strArray[idx++] = value;
      }
    }
    return strArray;
  }

  private void printStringArray(String[] strArray) {
    System.out.println("strArray " + strArray.length);
    int size = strArray.length;
    for (int idx = 0; idx < size; idx++) {
      System.out.println(strArray[idx]);
    }
  }

  public Metadata searchDocument(String documentSubClass, String criteria, String attrName, String attrValue) throws Exception {
    //PlmSession session = login(url, id.getUsername(), id.getPassword());
    PlmResponse response = null;
    PlmQuery documentQuery = PlmFactory.createQuery(documentSubClass);
    PlmAttributeCriteria attributeCriteriaPart = PlmFactory.createQueryAttributeCriteria(documentSubClass, attrName, criteria,attrValue);
    PlmExpressionCriteria criteriaPart = PlmFactory.createQueryExpression(documentSubClass, attributeCriteriaPart);
    documentQuery.setExpression(criteriaPart);
    PlmRequest request = PlmFactory.createRequest();
    request.addQuery(documentQuery);
    response = getSession().execute("search", request);
    PlmData data = response.getData();
    plmSession.close();
    return getObjectByAttribute(data, attrName, attrValue);
  }

  public Metadata getObjectDetail(String objectClass, String number, String revType) throws Exception {
    Metadata metadata = null;
    PlmObject object = PlmFactory.createObject(objectClass);
    object.setAttributeValue("Number", number);
    object.setAttributeValue("Rev", revType);
    PlmRequest request = PlmFactory.createRequest();
    request.getData().addObject(object);
    PlmResponse response = getSession().execute("get-object-detail", request);
    System.out.println("response.getData() " + response.getData());
    metadata = prepareMetadata(getPlmObject(response.getData(),number));
    System.out.println("result metadata" + metadata);
    plmSession.close();
    return metadata;
  }

  private PlmObject getPlmObject(PlmData data, String objectName) throws PlmException {
    PlmObject obj = null;
    PlmObject tempObj = null;
    if (null != objectName && null != data) {
      Collection objects = data.getObjects();
      Iterator iter = objects.iterator();
      while (iter.hasNext()) {
        tempObj = (PlmObject) iter.next();
        if(new Boolean(tempObj.getOptionValue("internal.found")).booleanValue()) {
          obj = tempObj;
          break;
        }
      }
    }
    return obj;
  }

  private Metadata getObjectByAttribute(PlmData data, String attributeName, String attributeValue) throws Exception {
    Metadata metadata = null;
    PlmObject obj = null;
    if (attributeName != null && attributeValue != null) {
      Collection objects = data.getObjects();
      Iterator iter = objects.iterator();
      while (iter.hasNext() && obj == null) {
        obj = (PlmObject) iter.next();
        obj = getObjectByAttribute(obj, attributeName, attributeValue);
      }
    }
    metadata = prepareMetadata(obj);
    return metadata;
  }

  private PlmObject getObjectByAttribute(PlmObject object, String attributeName, String attributeValue) throws Exception {
    String value = object.getAttributeValue(attributeName);
    if (attributeValue.equals(value)) { return object; }
    Collection relations = object.getRelations();
    Iterator iter = relations.iterator();
    PlmObject obj = null;
    while (iter.hasNext() && obj == null) {
      PlmRelation reln = (PlmRelation) iter.next();
      obj = reln.getChild();
      obj = getObjectByAttribute(obj, attributeName, attributeValue);
    }
    return obj;
  }

  private Metadata prepareMetadata(PlmObject plmObject) {
    if(null == plmObject) return null;
    Map attrMap = plmObject.getAttributes();
    Metadata data = new MetadataBase();
    Iterator itr = attrMap.keySet().iterator();
    while (itr.hasNext()) {
      String key = (String) itr.next();
      PlmAttribute plmAttribute = (PlmAttribute) attrMap.get(key);
      if (null != plmAttribute.getValue() && plmAttribute.getValue().length() > 0) {
        data.set(plmAttribute.getName(), plmAttribute.getValue());
      }
    }
    return data;
  }

  private String[] split(String str, String delim) {
    if (str == null || delim == null) { return null; }
    StringTokenizer t = new StringTokenizer(str, delim);
    String[] values = new String[t.countTokens()];
    for (int i = 0; t.hasMoreTokens(); i++) {
      values[i] = t.nextToken();
    }
    return values;
  }

  private void dump(String action, PlmRequest r) {
    XmlDocument rqd = new XmlDocument(PlmRequestHelper.marshal(r));
    System.out.println("request for : " + action);
    System.out.println(rqd.toFormattedString());
  }

  private void checkErrors(String action, PlmSession session, PlmResponse plmResponse) throws Exception{
    XmlDocument rpnsDoc1 = new XmlDocument(PlmResponseHelper.marshal(plmResponse));
    if (plmResponse.getData().getObjects().isEmpty()) {
      LogWriter.printOnConsole("there was no data present in the response.");
      LogWriter.printOnConsole(rpnsDoc1.toFormattedString());
    }
    if (plmResponse.getStatus().hasErrors() || plmResponse.getStatus().hasFatals()) {
      LogWriter.printOnConsole("Error while executing action: " + action);
      LogWriter.printOnConsole(rpnsDoc1.toFormattedString());
      session.close();
      String status = "error";
      if (null != plmResponse && null != plmResponse.getStatus())
          status = plmResponse.getStatus().toString();
      throw new Exception(status);
    }
  }

  private String url = null;
  private Authentication id = null;
  private PlmSession plmSession = null;
  protected AgilePLMAPIRepositoryBase repository = null;
}
