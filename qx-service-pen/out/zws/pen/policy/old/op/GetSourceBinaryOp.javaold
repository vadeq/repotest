package zws.pen.policy.old.op;
/*
* DesignState - Design Compression Technology
* @author: ptoleti
* @version: 1.0
* Created on Apr 27, 2007 9:58:02 AM
* Copywrite (c) 2007 Zero Wait-State Inc. All rights reserved
*/

import zws.application.Names;
import zws.application.Properties;
import zws.data.Metadata;
import zws.repository.Repository;
import zws.repository.source.RepositoryBinarySource;
import zws.security.Authentication;
import zws.service.pen.PENDataElement;
import zws.service.pen.SourceDataElement;
import zws.util.LogWriter;

import java.io.File;
import java.util.HashMap;
import java.util.Iterator;

/**
 * The Class UpdateStateAttributeOp.
 *
 * @author ptoleti
 */
public class GetSourceBinaryOp extends PENDataOpBase {

  /**
   * @throws Exception Exception
   * @see zws.pen.policy.old.op.PENDataOpBase#execute()
   */
  public void execute() throws Exception {
    String name = null;
    HashMap refMap = null;
    File binFile = null;
    String location = null;
    Metadata sourceData = null;
    PENDataElement penDataElement = null;
    final String outDir = Properties.get(Names.TEMP_DIR) + Names.PATH_SEPARATOR + "bin-";
    try {
      Repository repositoryObj = getPenPolicyObj().getSourceRepository();
      RepositoryBinarySource binSource = repositoryObj.materializeBinarySource();
      //Authentication id = new Authentication(repositoryObj.getSystemUsername(), repositoryObj.getSystemPassword());
      refMap = getPenData().getReferenceMap();
      Iterator itr = refMap.keySet().iterator();
      LogWriter.printOnConsole("Execute in GetSourceBinaryOp ");
      //iterate thru ref map and get binary and transform data from source data table.
      while (itr.hasNext()) {
          name = (String) itr.next();
          penDataElement    = (PENDataElement) refMap.get(name);
          SourceDataElement srcDataElement = penDataElement.getSourceDataElement();
          sourceData = srcDataElement.getSourceData();
          if (null != sourceData) {
            location = outDir + nextLocationCount();
            LogWriter.printOnConsole("location " + location);
            binSource.download(getQxCtx(), sourceData.getOrigin(), location, this.getAuthentication());
            binFile = new File(location, sourceData.getOrigin().getName());
            //File binFile = new File("C:\test.txt");
            if (null == binFile || !binFile.exists()) {
                //throw new NotAFile(binFile);
                LogWriter.printOnConsole("binFile Not found for " + sourceData.getOrigin().getName());
                if (null != binFile) {
                  LogWriter.printOnConsole(binFile.getAbsolutePath());
                } else {
                  LogWriter.printOnConsole("bin file is null.....");
                }
            } else {
              LogWriter.printOnConsole(binFile.getAbsolutePath());
              LogWriter.printOnConsole("Origin    " + getOrigin().getName() + " binFile " + binFile.getName());
              srcDataElement.addBinary(binFile);
              penDataElement.setSourceDataElement(srcDataElement);
              refMap.put(name, penDataElement);
            }
          } else {
            LogWriter.printOnConsole("Source Data is null in GetSourceBinaryOp");
          }
      }
      getPenData().setReferenceMap(refMap);
      setPenData(getPenData());
    } catch (Exception e) {
      e.printStackTrace();
      throw e;
    }
  }
  /** next count.
    * @return the count
    */
 private static synchronized long nextLocationCount() {
   return locationCount++;
 }

  /** count. */
  private static long locationCount = 0;

}
